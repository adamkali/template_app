name: Deploy to Server
on:
  push:
    branches:
      - master
      - main
  pull_request:

env:
  RUST_TOOLCHAIN: stable
  TOOLCHAIN_PROFILE: minimal
  JWT_PASSWORD: ${{ secrets.JWT_PASSWORD }}
  MAILER_PASSWORD: ${{ secrets.MAILER_PASSWORD }}
  POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}

permissions:
  packages: write

jobs:
  commit-hash:
    runs-on: ubuntu-latest
    outputs:
      commit_hash: ${{ steps.get_commit.outputs.commit_hash }}
    steps:
      - uses: actions/checkout@v4
      - name: Get commit hash
        id: get_commit
        run: echo "::set-output name=commit_hash::$(git rev-parse HEAD)"

  build-and-push-image:
    needs:
      - commit-hash
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set short git commit SHA
        id: vars
        run: |
          calculatedSha=$(git rev-parse --short ${{ github.sha }})
          echo "COMMIT_SHORT_SHA=$calculatedSha" >> $GITHUB_ENV

      - name: Log in to the Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: https://ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: .
          push: true
          tags: ghcr.io/adamkali/template_app:${{ needs.commit-hash.outputs.commit_hash }},ghcr.io/adamkali/template_app:latest

  deploy:
    runs-on: ubuntu-latest
    needs:
      - build-and-push-image
      - commit-hash

    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - name: create env file
      run: |
        echo "GIT_COMMIT_HASH=${{ github.sha }}" >> env

    - uses: arwynfr/actions-docker-context@v2
      with:
        docker_host: 'ssh://kalilarosa@kalilarosa.xyz'
        context_name: 'dev-server'
        ssh_cert: ${{ secrets.DEPLOY_SSH_CERT }}
        ssh_key: ${{ secrets.DEPLOY_SSH_KEY }}

    - run: docker --context dev-server stack deploy --compose-file docker-compose.yml template_app
