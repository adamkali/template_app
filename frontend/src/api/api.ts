/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI doc for template_app
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface CurrentResponse
 */
export interface CurrentResponse {
    /**
     * 
     * @type {string}
     * @memberof CurrentResponse
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof CurrentResponse
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CurrentResponse
     */
    'pid': string;
}
/**
 * 
 * @export
 * @interface DetailedResponseCurrentResponse
 */
export interface DetailedResponseCurrentResponse {
    /**
     * 
     * @type {DetailedResponseCurrentResponseData}
     * @memberof DetailedResponseCurrentResponse
     */
    'data'?: DetailedResponseCurrentResponseData;
    /**
     * 
     * @type {string}
     * @memberof DetailedResponseCurrentResponse
     */
    'message'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof DetailedResponseCurrentResponse
     */
    'next_link'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof DetailedResponseCurrentResponse
     */
    'successful': boolean;
}
/**
 * 
 * @export
 * @interface DetailedResponseCurrentResponseData
 */
export interface DetailedResponseCurrentResponseData {
    /**
     * 
     * @type {string}
     * @memberof DetailedResponseCurrentResponseData
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof DetailedResponseCurrentResponseData
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof DetailedResponseCurrentResponseData
     */
    'pid': string;
}
/**
 * 
 * @export
 * @interface DetailedResponseLoginResponse
 */
export interface DetailedResponseLoginResponse {
    /**
     * 
     * @type {DetailedResponseLoginResponseData}
     * @memberof DetailedResponseLoginResponse
     */
    'data'?: DetailedResponseLoginResponseData;
    /**
     * 
     * @type {string}
     * @memberof DetailedResponseLoginResponse
     */
    'message'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof DetailedResponseLoginResponse
     */
    'next_link'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof DetailedResponseLoginResponse
     */
    'successful': boolean;
}
/**
 * 
 * @export
 * @interface DetailedResponseLoginResponseData
 */
export interface DetailedResponseLoginResponseData {
    /**
     * 
     * @type {boolean}
     * @memberof DetailedResponseLoginResponseData
     */
    'is_verified': boolean;
    /**
     * 
     * @type {string}
     * @memberof DetailedResponseLoginResponseData
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof DetailedResponseLoginResponseData
     */
    'pid': string;
    /**
     * 
     * @type {string}
     * @memberof DetailedResponseLoginResponseData
     */
    'token': string;
}
/**
 * 
 * @export
 * @interface DetailedResponseString
 */
export interface DetailedResponseString {
    /**
     * 
     * @type {string}
     * @memberof DetailedResponseString
     */
    'data'?: string;
    /**
     * 
     * @type {string}
     * @memberof DetailedResponseString
     */
    'message'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof DetailedResponseString
     */
    'next_link'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof DetailedResponseString
     */
    'successful': boolean;
}
/**
 * 
 * @export
 * @interface ForgotParams
 */
export interface ForgotParams {
    /**
     * 
     * @type {string}
     * @memberof ForgotParams
     */
    'email': string;
}
/**
 * 
 * @export
 * @interface LoginParams
 */
export interface LoginParams {
    /**
     * 
     * @type {string}
     * @memberof LoginParams
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof LoginParams
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface LoginResponse
 */
export interface LoginResponse {
    /**
     * 
     * @type {boolean}
     * @memberof LoginResponse
     */
    'is_verified': boolean;
    /**
     * 
     * @type {string}
     * @memberof LoginResponse
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof LoginResponse
     */
    'pid': string;
    /**
     * 
     * @type {string}
     * @memberof LoginResponse
     */
    'token': string;
}
/**
 * 
 * @export
 * @interface RegisterParams
 */
export interface RegisterParams {
    /**
     * 
     * @type {string}
     * @memberof RegisterParams
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof RegisterParams
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof RegisterParams
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface ResetParams
 */
export interface ResetParams {
    /**
     * 
     * @type {string}
     * @memberof ResetParams
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof ResetParams
     */
    'token': string;
}
/**
 * 
 * @export
 * @interface VerifyParams
 */
export interface VerifyParams {
    /**
     * 
     * @type {string}
     * @memberof VerifyParams
     */
    'token': string;
}

/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        current: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/auth/current`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary In case the user forgot his password  this endpoints generate a forgot token and send email to the user. In case the email not found in our DB, we are returning a valid request for for security reasons (not exposing users DB list).
         * @param {ForgotParams} forgotParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        forgot: async (forgotParams: ForgotParams, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'forgotParams' is not null or undefined
            assertParamExists('forgot', 'forgotParams', forgotParams)
            const localVarPath = `/api/auth/forgot`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(forgotParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates a user login and returns a token
         * @param {LoginParams} loginParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login: async (loginParams: LoginParams, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginParams' is not null or undefined
            assertParamExists('login', 'loginParams', loginParams)
            const localVarPath = `/api/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Register function creates a new user with the given parameters and sends a welcome email to the user
         * @param {RegisterParams} registerParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        register: async (registerParams: RegisterParams, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'registerParams' is not null or undefined
            assertParamExists('register', 'registerParams', registerParams)
            const localVarPath = `/api/auth/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(registerParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary reset user password by the given parameters
         * @param {ResetParams} resetParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reset: async (resetParams: ResetParams, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'resetParams' is not null or undefined
            assertParamExists('reset', 'resetParams', resetParams)
            const localVarPath = `/api/auth/reset`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(resetParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Verify register user. if the user not verified his email, he can\'t login to the system.
         * @param {VerifyParams} verifyParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verify: async (verifyParams: VerifyParams, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'verifyParams' is not null or undefined
            assertParamExists('verify', 'verifyParams', verifyParams)
            const localVarPath = `/api/auth/verify`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(verifyParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async current(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DetailedResponseCurrentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.current(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.current']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary In case the user forgot his password  this endpoints generate a forgot token and send email to the user. In case the email not found in our DB, we are returning a valid request for for security reasons (not exposing users DB list).
         * @param {ForgotParams} forgotParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async forgot(forgotParams: ForgotParams, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.forgot(forgotParams, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.forgot']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Creates a user login and returns a token
         * @param {LoginParams} loginParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async login(loginParams: LoginParams, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DetailedResponseLoginResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.login(loginParams, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.login']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Register function creates a new user with the given parameters and sends a welcome email to the user
         * @param {RegisterParams} registerParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async register(registerParams: RegisterParams, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DetailedResponseString>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.register(registerParams, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.register']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary reset user password by the given parameters
         * @param {ResetParams} resetParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reset(resetParams: ResetParams, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.reset(resetParams, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.reset']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Verify register user. if the user not verified his email, he can\'t login to the system.
         * @param {VerifyParams} verifyParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async verify(verifyParams: VerifyParams, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.verify(verifyParams, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.verify']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        current(options?: RawAxiosRequestConfig): AxiosPromise<DetailedResponseCurrentResponse> {
            return localVarFp.current(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary In case the user forgot his password  this endpoints generate a forgot token and send email to the user. In case the email not found in our DB, we are returning a valid request for for security reasons (not exposing users DB list).
         * @param {AuthApiForgotRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        forgot(requestParameters: AuthApiForgotRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.forgot(requestParameters.forgotParams, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Creates a user login and returns a token
         * @param {AuthApiLoginRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(requestParameters: AuthApiLoginRequest, options?: RawAxiosRequestConfig): AxiosPromise<DetailedResponseLoginResponse> {
            return localVarFp.login(requestParameters.loginParams, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Register function creates a new user with the given parameters and sends a welcome email to the user
         * @param {AuthApiRegisterRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        register(requestParameters: AuthApiRegisterRequest, options?: RawAxiosRequestConfig): AxiosPromise<DetailedResponseString> {
            return localVarFp.register(requestParameters.registerParams, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary reset user password by the given parameters
         * @param {AuthApiResetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reset(requestParameters: AuthApiResetRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.reset(requestParameters.resetParams, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Verify register user. if the user not verified his email, he can\'t login to the system.
         * @param {AuthApiVerifyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verify(requestParameters: AuthApiVerifyRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.verify(requestParameters.verifyParams, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for forgot operation in AuthApi.
 * @export
 * @interface AuthApiForgotRequest
 */
export interface AuthApiForgotRequest {
    /**
     * 
     * @type {ForgotParams}
     * @memberof AuthApiForgot
     */
    readonly forgotParams: ForgotParams
}

/**
 * Request parameters for login operation in AuthApi.
 * @export
 * @interface AuthApiLoginRequest
 */
export interface AuthApiLoginRequest {
    /**
     * 
     * @type {LoginParams}
     * @memberof AuthApiLogin
     */
    readonly loginParams: LoginParams
}

/**
 * Request parameters for register operation in AuthApi.
 * @export
 * @interface AuthApiRegisterRequest
 */
export interface AuthApiRegisterRequest {
    /**
     * 
     * @type {RegisterParams}
     * @memberof AuthApiRegister
     */
    readonly registerParams: RegisterParams
}

/**
 * Request parameters for reset operation in AuthApi.
 * @export
 * @interface AuthApiResetRequest
 */
export interface AuthApiResetRequest {
    /**
     * 
     * @type {ResetParams}
     * @memberof AuthApiReset
     */
    readonly resetParams: ResetParams
}

/**
 * Request parameters for verify operation in AuthApi.
 * @export
 * @interface AuthApiVerifyRequest
 */
export interface AuthApiVerifyRequest {
    /**
     * 
     * @type {VerifyParams}
     * @memberof AuthApiVerify
     */
    readonly verifyParams: VerifyParams
}

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public current(options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).current(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary In case the user forgot his password  this endpoints generate a forgot token and send email to the user. In case the email not found in our DB, we are returning a valid request for for security reasons (not exposing users DB list).
     * @param {AuthApiForgotRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public forgot(requestParameters: AuthApiForgotRequest, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).forgot(requestParameters.forgotParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Creates a user login and returns a token
     * @param {AuthApiLoginRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public login(requestParameters: AuthApiLoginRequest, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).login(requestParameters.loginParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Register function creates a new user with the given parameters and sends a welcome email to the user
     * @param {AuthApiRegisterRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public register(requestParameters: AuthApiRegisterRequest, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).register(requestParameters.registerParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary reset user password by the given parameters
     * @param {AuthApiResetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public reset(requestParameters: AuthApiResetRequest, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).reset(requestParameters.resetParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Verify register user. if the user not verified his email, he can\'t login to the system.
     * @param {AuthApiVerifyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public verify(requestParameters: AuthApiVerifyRequest, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).verify(requestParameters.verifyParams, options).then((request) => request(this.axios, this.basePath));
    }
}



