/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI doc for template_app
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DetailedResponseCurrentResponse,
  DetailedResponseLoginResponse,
  DetailedResponseString,
  ForgotParams,
  LoginParams,
  RegisterParams,
  ResetParams,
  VerifyParams,
} from '../models/index';
import {
    DetailedResponseCurrentResponseFromJSON,
    DetailedResponseCurrentResponseToJSON,
    DetailedResponseLoginResponseFromJSON,
    DetailedResponseLoginResponseToJSON,
    DetailedResponseStringFromJSON,
    DetailedResponseStringToJSON,
    ForgotParamsFromJSON,
    ForgotParamsToJSON,
    LoginParamsFromJSON,
    LoginParamsToJSON,
    RegisterParamsFromJSON,
    RegisterParamsToJSON,
    ResetParamsFromJSON,
    ResetParamsToJSON,
    VerifyParamsFromJSON,
    VerifyParamsToJSON,
} from '../models/index';

export interface ForgotRequest {
    forgotParams: ForgotParams;
}

export interface LoginRequest {
    loginParams: LoginParams;
}

export interface RegisterRequest {
    registerParams: RegisterParams;
}

export interface ResetRequest {
    resetParams: ResetParams;
}

export interface VerifyRequest {
    verifyParams: VerifyParams;
}

/**
 * 
 */
export class AuthApi extends runtime.BaseAPI {

    /**
     */
    async currentRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DetailedResponseCurrentResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/current`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DetailedResponseCurrentResponseFromJSON(jsonValue));
    }

    /**
     */
    async current(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DetailedResponseCurrentResponse> {
        const response = await this.currentRaw(initOverrides);
        return await response.value();
    }

    /**
     * In case the user forgot his password  this endpoints generate a forgot token and send email to the user. In case the email not found in our DB, we are returning a valid request for for security reasons (not exposing users DB list).
     */
    async forgotRaw(requestParameters: ForgotRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['forgotParams'] == null) {
            throw new runtime.RequiredError(
                'forgotParams',
                'Required parameter "forgotParams" was null or undefined when calling forgot().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/forgot`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ForgotParamsToJSON(requestParameters['forgotParams']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * In case the user forgot his password  this endpoints generate a forgot token and send email to the user. In case the email not found in our DB, we are returning a valid request for for security reasons (not exposing users DB list).
     */
    async forgot(requestParameters: ForgotRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.forgotRaw(requestParameters, initOverrides);
    }

    /**
     * Creates a user login and returns a token
     */
    async loginRaw(requestParameters: LoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DetailedResponseLoginResponse>> {
        if (requestParameters['loginParams'] == null) {
            throw new runtime.RequiredError(
                'loginParams',
                'Required parameter "loginParams" was null or undefined when calling login().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LoginParamsToJSON(requestParameters['loginParams']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DetailedResponseLoginResponseFromJSON(jsonValue));
    }

    /**
     * Creates a user login and returns a token
     */
    async login(requestParameters: LoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DetailedResponseLoginResponse> {
        const response = await this.loginRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Register function creates a new user with the given parameters and sends a welcome email to the user
     */
    async registerRaw(requestParameters: RegisterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DetailedResponseString>> {
        if (requestParameters['registerParams'] == null) {
            throw new runtime.RequiredError(
                'registerParams',
                'Required parameter "registerParams" was null or undefined when calling register().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/register`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RegisterParamsToJSON(requestParameters['registerParams']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DetailedResponseStringFromJSON(jsonValue));
    }

    /**
     * Register function creates a new user with the given parameters and sends a welcome email to the user
     */
    async register(requestParameters: RegisterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DetailedResponseString> {
        const response = await this.registerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * reset user password by the given parameters
     */
    async resetRaw(requestParameters: ResetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['resetParams'] == null) {
            throw new runtime.RequiredError(
                'resetParams',
                'Required parameter "resetParams" was null or undefined when calling reset().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/reset`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ResetParamsToJSON(requestParameters['resetParams']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * reset user password by the given parameters
     */
    async reset(requestParameters: ResetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.resetRaw(requestParameters, initOverrides);
    }

    /**
     * Verify register user. if the user not verified his email, he can\'t login to the system.
     */
    async verifyRaw(requestParameters: VerifyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['verifyParams'] == null) {
            throw new runtime.RequiredError(
                'verifyParams',
                'Required parameter "verifyParams" was null or undefined when calling verify().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/verify`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VerifyParamsToJSON(requestParameters['verifyParams']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Verify register user. if the user not verified his email, he can\'t login to the system.
     */
    async verify(requestParameters: VerifyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.verifyRaw(requestParameters, initOverrides);
    }

}
