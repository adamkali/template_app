---
services:
  web:
    image: ghcr.io/adamkali/template_app:stable
    environment:
      - SERVICE_FQDN_WEB_5150
      - REDIS_URI=$SERVICE_URL_REDIS
      - _APP_URL=$SERVICE_FQDN_WEB_5150
      - REDIS_PASSWORD=$SERVICE_PASSWORD_REDIS
      - REDIS_USERNAME=$SERVICE_USER_REDIS
      - MINIO_ACCESS_TOKEN=${MINIO_ACCESS_TOKEN}
      - MINIO_SECRET_TOKEN=${MINIO_SECRET_TOKEN}
      - MINIO_URI=$MINIO_SERVER_URL
      - POSTGRES_USER=$SERVICE_USER_POSTGRES
      - POSTGRES_DB=$SERVICE_REALBASE64_POSTGRES
      - POSTGRES_PASSWORD=$SERVICE_PASSWORD_POSTGRES
      - JWT_PHRASE=$SERVICE_REALBASE64_WEB
      - POSTGRES_URI=$SERVICE_URL_POSTGRES}
    healthcheck:
      test:
        - CMD
        - curl
        - -f
        - http://127.0.0.1:5150/_health
      interval: 5s
      timeout: 20s
      retries: 10
    depends_on: postgresql
    volumes:
      - type: bind
        source: ./config/production.yaml
        target: /usr/app/config/production.yaml
        content: |
          logger:
            enable: true
            level: trace 
            format: compact

          server:
            binding: 0.0.0.0
            port: 5150
            host: http://localhost
            middlewares:
              static:
                enable: true
                must_exist: true
                precompressed: false
                folder:
                  uri: "/"
                  path: "frontend/dist"
                fallback: "frontend/dist/index.html"

          workers:
            mode: BackgroundAsync

          mailer:
            smtp:
              enable: false
              host: smtp-mail.outlook.com
              port: 587
              secure: true
              auth: 
                user: adamkali@outlook.com 
                password: {{ get_env(name="MAILER_PASSWORD", default="admin") }}

          database:
            # Database connection URI
            uri: 'postgres://{{ get_env(name="POSTGRES_USER") }}:{{ get_env(name="POSTGRES_PASSWORD") }}@{{ get_env(name="POSTGRES_URI") }}/{{ get_env(name="POSTGRES_DB") }}'
            enable_logging: true
            connect_timeout: 500
            idle_timeout: 500
            min_connections: 1
            max_connections: 3
            auto_migrate: true
            dangerously_truncate: false
            dangerously_recreate: false

          # Queue Configuration
          queue:
            kind: Redis
            uri: '{{ get_env(name="REDIS_URI") }}'
            dangerously_flush: false

          # Authentication Configuration
          auth:
            jwt:
              secret: '{{ get_env(name="JWT_PHRASE") }}'
              expiration: 604800 # 7 days

          settings:
            minio_config:
              uri: '{{ get_env(name="MINIO_URI") }}'
              access_key: '{{ get_env(name="MINIO_ACCESS_TOKEN") }}',
              secret_key: '{{ get_env(name="MINIO_SECRET_TOKEN") }}'
  grafana:
    image: grafana/grafana-oss
    environment:
      - SERVICE_FQDN_GRAFANA_3000
      - GF_SERVER_ROOT_URL=${SERVICE_FQDN_GRAFANA}
      - GF_SERVER_DOMAIN=${SERVICE_FQDN_GRAFANA}
      - GF_SECURITY_ADMIN_PASSWORD=${SERVICE_PASSWORD_GRAFANA}
    volumes:
      - grafana-data:/var/lib/grafana
    healthcheck:
      test:
        - CMD
        - curl
        - -f
        - http://127.0.0.1:3000/api/health
      interval: 5s
      timeout: 20s
      retries: 10
  minio:
    image: quay.io/minio/minio:latest
    command: server /data --console-address ":9001"
    environment:
      - MINIO_SERVER_URL=$MINIO_SERVER_URL
      - MINIO_BROWSER_REDIRECT_URL=$MINIO_BROWSER_REDIRECT_URL
      - MINIO_ROOT_USER=$SERVICE_USER_MINIO
      - MINIO_ROOT_PASSWORD=$SERVICE_PASSWORD_MINIO
    volumes:
      - minio-data:/data
    healthcheck:
      test:
        - CMD
        - mc
        - ready
        - local
      interval: 5s
      timeout: 20s
      retries: 10
  postgresql:
    image: postgres:16-alpine
    volumes:
      - postgresql-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=$SERVICE_USER_POSTGRES
      - POSTGRES_PASSWORD=$SERVICE_PASSWORD_POSTGRES
      - POSTGRES_DB=$SERVICE_REALBASE64_POSTGRES
      - POSTGRES_HOST=$COOLIFY_RESOURCE_UUID 
    healthcheck:
      test:
        - CMD-SHELL
        - pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}
      interval: 5s
      timeout: 20s
      retries: 10
  redis:
    image: redis:alpine
    environment:
      - ALLOW_EMPTY_PASSWORD=false
      - REDIS_PASSWORD=$SERVICE_PASSWORD_REDIS
      - REDIS_USERNAME=$SERVICE_USERNAME_REDIS
    volumes:
      - redis-data:/data

